<% include ../partials/header.ejs %>
<div id="infoPanel">
  <button id="toggleInfoPanel" class="hidden"></button>
  <div id="infoBackground"></div>
  <div id="infoText">
  </div>
</div>

<div id="mapContainer">
  <div id='mapid'></div>
</div>
<div id="content">
  <div id="intro">

  </div>
  <div id="scroller">
    <% var i; for(i = 0; i < data.length; i++) { %>
    <section class='step toScroll title'><%= data[i].name %></section>
    <%
    }
    %>
  </div>
  <div id="outro">

  </div>
</div>

<script>
  const data = <%- JSON.stringify(data) %>;
  const locationData = [{
    className: "pearlharbour-data",
    radius: 10000,
    zoom: 8
  },{
    className: "coralsea-data",
    radius: 500000,
    zoom: 5
  },{
    className: "midway-data",
    radius: 1000000,
    zoom: 4.5
  },{
    className: "savoisland-data",
    radius: 40000,
    zoom: 8
  },{
    className: "guadalcanal-data",
    radius: 40000,
    zoom: 8
  },{
    className: "philippinesea-data",
    radius: 300000,
    zoom: 6
  },{
    className: "leytegulf-data",
    radius: 200000,
    zoom: 6.2
  },{
    className: "tengo-data",
    radius: 100000,
    zoom: 6.5
  },{
    className: "okinawa-data",
    radius: 100000,
    zoom: 7
  },{
    zoom: 3.4
  }]

  var mymap = L.map('mapid').setView(getCoordinate(data[0].location),locationData[0].zoom);
  mymap.touchZoom.disable();
  mymap.scrollWheelZoom.disable();
  mymap.doubleClickZoom.disable();
  mymap.zoomControl.disable();
  mymap.dragging.disable();
  mymap.keyboard.disable();
  mymap.boxZoom.disable();
  document.getElementsByClassName('leaflet-control-zoom')[0].style.visibility = 'hidden';
  

  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
    maxZoom: 18,
    id: 'mapbox.streets',
    accessToken: 'pk.eyJ1IjoiYWxhaW5oYXJkeSIsImEiOiJjamEwdWVveXE4ZmUwMzNweTc3Y3M2YXAzIn0.AAD0RPr99q21ifRDZPQ9yw'
}).addTo(mymap);

  for(let i = 0; i < locationData.length-1; i++) {
    L.circle(getCoordinate(data[i].location), {
      color: 'red',
      fillColor: '#f03',
      fillOpacity: 0.5,
      radius: locationData[i].radius,
      className: locationData[i].className + ' redCircle hiddenCircle'
    }).addTo(mymap);
  }

  let scrollingPosition;

  function showInfo() {
    var pnl = document.getElementById('infoPanel');
    document.getElementById('toggleInfoPanel').classList.remove('hidden'); 
    pnl.style.left = '0px';
    document.getElementById('toggleInfoPanel').onclick = hideInfo;

    document.getElementById('content').classList.add('stopScrolling');
  }

  function hideInfo() {
    document.getElementById('content').classList.remove('stopScrolling');
    window.scrollTo(0, sectionPositions[currentIndex]);
    
    var pnl = document.getElementById('infoPanel');
    document.getElementById('toggleInfoPanel').classList.add("hidden"); 
    pnl.style.left = "100%";
    document.getElementById('toggleInfoPanel').onclick = showInfo;
  }

  function hideAllStep(except) {
    for(let i = 0; i < sections.size(); i++) {
      if(i !== except) {
        let top = sections._groups[0][i].style.opacity = 0;
      }
    }
  }
  
  document.getElementById('toggleInfoPanel').onclick = showInfo;
  document.onkeypress = (e) => {
    console.log(e.keyCode);

    switch(e.keyCode) {
      // Left
      case 37:
        showInfo();
        return false;
      // Right
      case 39:
      // Esc
      case 27:
        hideInfo();
        return false;
      // Page Up
      case 33:
          if (currentIndex === 0) {
            scrollToHome();
          } else if (currentIndex >= data.length) {
            window.scrollTo(0, sectionPositions[data.length - 1]);
          } else {
            window.scrollTo(0, sectionPositions[currentIndex - 1]);
          }
        return false;
      // Space
      case 0:
      // Page Down
      case 34:
        if (currentIndex < 0) {
          window.scrollTo(0, sectionPositions[0]);
        } else if (currentIndex >= data.length - 1) {
          scrollToEnd();
        } else {
          window.scrollTo(0, sectionPositions[currentIndex+1]);
        }
        return false;
      // Home
      case 36:
        scrollToHome();
        return false;
      // End
      case 35:
        scrollToEnd();
        return false;
    }
  };

  function scrollToHome() {
    window.scrollTo(0, document.getElementById('intro').getBoundingClientRect().top);
    currentIndex = -1;
  }

  function scrollToEnd() {
    if (currentIndex >= data.length) {
      return;
    }
    let a = document.getElementById('outro').getBoundingClientRect();
    window.scrollTo(0, a.bottom - a.height * 0.5 + window.pageYOffset);
    currentIndex = data.length;
  }

  function getCoordinate(location) {
    let ltd = location.latitude;
    let lng = location.longitude;
    if (lng >= 0) {
      lng = lng % 360;
    } else {
      while(lng < 0) {
        lng += 360;
      }
    }
    
    return [ltd, lng];
  }


  //-A Start---------------------------------------------------------
  let sectionPositions = [];
  let sections = d3.selectAll('.step');
  let containerStart = [];
  let currentIndex = -1;

  function resize() {
    let startPos;

    sectionPositions = [];

    for(let i = 0; i < sections.size(); i++) {
      let top = sections._groups[0][i].getBoundingClientRect().top + window.pageYOffset;

      if(i === 0) {
        startPos = top;
      }
      sectionPositions.push(top);
    }
  }
  resize();

  window.addEventListener('resize', function() {
    resize(); 
    window.scrollTo(0, sectionPositions[currentIndex]);   
  });

  d3.select(window).on('scroll.scroller', position);

  let dispatch = d3.dispatch("active", "progress");

  function position() {
    let bottomMargin = 50;
    let topMargin = 150;
    let screenTop = window.pageYOffset;
    
    // Find which element's position is in the frame of a portion of the visible window
    let sectionIndex = sectionPositions.findIndex( (a) => {
      return a > screenTop - window.innerHeight*0.11 && a < screenTop + window.innerHeight*0.81;
    });
    
    hideAllStep(sectionIndex);

    if (sectionIndex === -1) {
      return;
    }

    //if(pos + window.innerHeight * 0.8 > sectionPositions[sectionIndex] && pos - window.innerHeight * .1 <= sectionPositions[sectionIndex]) {
    let opacity = 1 - (sectionPositions[sectionIndex] - screenTop - 1) / (window.innerHeight*0.8*0.9);
    sections._groups[0][sectionIndex].style.opacity = opacity;
    //}

    let newIndexPos = sectionPositions[sectionIndex];

    // When the section is near the top in a define frame, trigger the event to move the map
    if (currentIndex !== sectionIndex && newIndexPos > screenTop - topMargin && newIndexPos < screenTop + bottomMargin) {
      dispatch.call('active', this, sectionIndex);
      currentIndex = sectionIndex;
    }
  }

  scroll.on = function (action, callback) {
    dispatch.on(action, callback);
  };

  scroll.on('active', function(index){
    mymap.flyTo(getCoordinate(data[index].location),locationData[index].zoom);
  });
  

  mymap.on('moveend', function() {
      if(currentIndex < 0 || currentIndex >= data.length - 1)
        return;

      document.getElementsByClassName('redCircle')[currentIndex].classList.remove('hiddenCircle');
  });


  //-A End-----------------------------------------------------------
</script>



<% include ../partials/footer.ejs %>